package wyyy.bean;

import org.greenrobot.greendao.annotation.*;

import wyyy.dao.DaoSession;
import org.greenrobot.greendao.DaoException;

import wyyy.dao.TasksDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "TASKS".
 */
@Entity(active = true)
public class Tasks {

    @Id
    private Long id;
    private Long BQID;
    private Long USERID;
    private Integer RWLX;
    private String RWM;
    private String ZYH;
    private String RWNR;
    private String TXM;
    private java.util.Date YZSJ;
    private java.util.Date RWXSSJC;
    private String RWZT;
    private Integer RWJB;
    private Boolean RRTZ;
    private String ZZR;
    private java.util.Date ZZSJ;
    private String ZZJG;
    private String SHR;
    private java.util.Date SHSJ;
    private String SHJG;
    private String BRXM;
    private String BRXB;
    private Integer BRNL;
    private Integer TJZT;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient TasksDao myDao;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Tasks() {
    }

    public Tasks(Long id) {
        this.id = id;
    }

    @Generated
    public Tasks(Long id, Long BQID, Long USERID, Integer RWLX, String RWM, String ZYH, String RWNR, String TXM, java.util.Date YZSJ, java.util.Date RWXSSJC, String RWZT, Integer RWJB, Boolean RRTZ, String ZZR, java.util.Date ZZSJ, String ZZJG, String SHR, java.util.Date SHSJ, String SHJG, String BRXM, String BRXB, Integer BRNL, Integer TJZT) {
        this.id = id;
        this.BQID = BQID;
        this.USERID = USERID;
        this.RWLX = RWLX;
        this.RWM = RWM;
        this.ZYH = ZYH;
        this.RWNR = RWNR;
        this.TXM = TXM;
        this.YZSJ = YZSJ;
        this.RWXSSJC = RWXSSJC;
        this.RWZT = RWZT;
        this.RWJB = RWJB;
        this.RRTZ = RRTZ;
        this.ZZR = ZZR;
        this.ZZSJ = ZZSJ;
        this.ZZJG = ZZJG;
        this.SHR = SHR;
        this.SHSJ = SHSJ;
        this.SHJG = SHJG;
        this.BRXM = BRXM;
        this.BRXB = BRXB;
        this.BRNL = BRNL;
        this.TJZT = TJZT;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getTasksDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getBQID() {
        return BQID;
    }

    public void setBQID(Long BQID) {
        this.BQID = BQID;
    }

    public Long getUSERID() {
        return USERID;
    }

    public void setUSERID(Long USERID) {
        this.USERID = USERID;
    }

    public Integer getRWLX() {
        return RWLX;
    }

    public void setRWLX(Integer RWLX) {
        this.RWLX = RWLX;
    }

    public String getRWM() {
        return RWM;
    }

    public void setRWM(String RWM) {
        this.RWM = RWM;
    }

    public String getZYH() {
        return ZYH;
    }

    public void setZYH(String ZYH) {
        this.ZYH = ZYH;
    }

    public String getRWNR() {
        return RWNR;
    }

    public void setRWNR(String RWNR) {
        this.RWNR = RWNR;
    }

    public String getTXM() {
        return TXM;
    }

    public void setTXM(String TXM) {
        this.TXM = TXM;
    }

    public java.util.Date getYZSJ() {
        return YZSJ;
    }

    public void setYZSJ(java.util.Date YZSJ) {
        this.YZSJ = YZSJ;
    }

    public java.util.Date getRWXSSJC() {
        return RWXSSJC;
    }

    public void setRWXSSJC(java.util.Date RWXSSJC) {
        this.RWXSSJC = RWXSSJC;
    }

    public String getRWZT() {
        return RWZT;
    }

    public void setRWZT(String RWZT) {
        this.RWZT = RWZT;
    }

    public Integer getRWJB() {
        return RWJB;
    }

    public void setRWJB(Integer RWJB) {
        this.RWJB = RWJB;
    }

    public Boolean getRRTZ() {
        return RRTZ;
    }

    public void setRRTZ(Boolean RRTZ) {
        this.RRTZ = RRTZ;
    }

    public String getZZR() {
        return ZZR;
    }

    public void setZZR(String ZZR) {
        this.ZZR = ZZR;
    }

    public java.util.Date getZZSJ() {
        return ZZSJ;
    }

    public void setZZSJ(java.util.Date ZZSJ) {
        this.ZZSJ = ZZSJ;
    }

    public String getZZJG() {
        return ZZJG;
    }

    public void setZZJG(String ZZJG) {
        this.ZZJG = ZZJG;
    }

    public String getSHR() {
        return SHR;
    }

    public void setSHR(String SHR) {
        this.SHR = SHR;
    }

    public java.util.Date getSHSJ() {
        return SHSJ;
    }

    public void setSHSJ(java.util.Date SHSJ) {
        this.SHSJ = SHSJ;
    }

    public String getSHJG() {
        return SHJG;
    }

    public void setSHJG(String SHJG) {
        this.SHJG = SHJG;
    }

    public String getBRXM() {
        return BRXM;
    }

    public void setBRXM(String BRXM) {
        this.BRXM = BRXM;
    }

    public String getBRXB() {
        return BRXB;
    }

    public void setBRXB(String BRXB) {
        this.BRXB = BRXB;
    }

    public Integer getBRNL() {
        return BRNL;
    }

    public void setBRNL(Integer BRNL) {
        this.BRNL = BRNL;
    }

    public Integer getTJZT() {
        return TJZT;
    }

    public void setTJZT(Integer TJZT) {
        this.TJZT = TJZT;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
